{"ast":null,"code":"var _jsxFileName = \"/Users/Yana_Krupina/diplom/react_chat/src/component/ChatChange.js\";\nimport ChatBot from 'react-simple-chatbot';\nimport PropTypes from 'prop-types';\nimport { firestore } from '../firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatChange = props => {\n  const {\n    setUserCurrent,\n    userCurrent,\n    idUser,\n    setNewAccount\n  } = props;\n\n  const getPrimary = (value, duration) => {\n    if (duration === 'Frontend Developer') {\n      return 'JavaScript, HTML, CSS';\n    } else {\n      if (duration === 'Backend Developer') {\n        return value;\n      } else {\n        return 'QA test';\n      }\n    }\n  };\n\n  const getUnit = (duration, unit) => {\n    return `Digital Engagement Practice/Digital Technology/\n                DEP UA/DEP UA East & West/DEP UA East/${duration}/\n                ${unit}`;\n  };\n\n  const getManager = value => {\n    switch (value) {\n      case 'ReactJS':\n      case 'Java':\n      case 'Automated Test Specialists':\n        return 'Lochlan Cottrell';\n\n      case 'React Native':\n      case '.NET':\n      case 'DBMS testers':\n        return 'Yasin Huang';\n\n      case 'AngularJS':\n      case 'PHP':\n      case 'Test Analysts':\n        return 'Amanpreet Cowan';\n\n      case 'NodeJS':\n      case 'Python':\n      case 'Developers-testers':\n        return 'Dewi Dunlap';\n\n      case 'Vue':\n      case 'C++':\n      case 'Testers-DevOPs':\n        return 'Tonya Chang';\n\n      case 'BabelJs':\n      default:\n        return 'Kendall Bolton';\n    }\n  };\n\n  const getHR = value => {\n    switch (value) {\n      case 'Frontend Developer':\n        return 'Coral Howarth';\n\n      case 'Backend Developer':\n        return 'Zidane Pate';\n\n      case 'Testers':\n        return 'Bradley Hendrix';\n\n      default:\n        return 'Fraya Hood';\n    }\n  };\n\n  const handleEnd = async ({\n    steps,\n    values\n  }) => {\n    console.log(values); // const user = {};\n    // user.duration = values[1];\n    // user.profession = values[2];\n    // user.status = values[0];\n    // user.address = values[4];\n    // user.phone = values[3];\n    // user.displayName = userCurrent.displayName;\n    // user.new = false;\n    // user.email = userCurrent.email;\n    // const primary = user.primary = getPrimary(user.profession, user.duration);\n    // const unit = user.unit = getUnit(user.duration, user.profession);\n    // const unitManager = user.unitManager = getManager(user.profession);\n    // const hr = user.hr = getHR(values[1]);\n    // setUserCurrent(user);\n    // console.log(123, user ,idUser);\n    // firestore\n    // .collection('users')\n    // .doc(idUser)\n    // .update({\n    //     new: false,\n    //     duration : values[1],\n    //     profession : values[2],\n    //     status: values[0],\n    //     address: values[4],\n    //     phone : values[3],\n    //     unit: unit,\n    //     primary: primary,\n    //     unitManager: unitManager,\n    //     hr: hr,\n    // })\n    // .then(() => {\n    //     console.log('User updated!');\n    //     setNewAccount(false)\n    // });\n  };\n\n  return /*#__PURE__*/_jsxDEV(ChatBot, {\n    steps: stepsChange,\n    handleEnd: handleEnd\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n};\n\n_c = ChatChange;\nChatChange.propTypes = {\n  steps: PropTypes.object\n};\nChatChange.defaultProps = {\n  steps: undefined\n};\nexport default ChatChange;\nexport const stepsChange = [{\n  id: '1',\n  message: 'What do you want change?',\n  trigger: 'change'\n}, {\n  id: 'change',\n  options: [{\n    value: 'name',\n    label: 'Name',\n    trigger: 'name'\n  }, {\n    value: 'phone',\n    label: 'Phone',\n    trigger: 'phone'\n  }, {\n    value: 'duration',\n    label: 'Global direction',\n    trigger: 'duration'\n  }, {\n    value: '1',\n    label: 'Nothing',\n    trigger: 'end'\n  }]\n}, {\n  id: 'name',\n  message: 'What is your new name?',\n  user: true,\n  trigger: '1'\n}, {\n  id: 'phone',\n  message: 'What is your new phone?',\n  user: true,\n  trigger: '1',\n  validator: value => {\n    if (isNaN(value)) {\n      return 'value must be a number';\n    } else if (value < 0) {\n      return 'value must be positive';\n    } else if (value < 9) {\n      return `Your enter incorrect number`;\n    }\n\n    return true;\n  }\n}, {\n  id: 'duration',\n  message: 'What is your global direction?',\n  trigger: 'duration_options'\n}, {\n  id: 'duration_options',\n  options: [{\n    value: 'Frontend Developer',\n    label: 'Frontend Developer',\n    trigger: 'front'\n  }, {\n    value: 'Backend Developer',\n    label: 'Backend Developer',\n    trigger: 'back'\n  }, {\n    value: 'Testers',\n    label: 'Testers',\n    trigger: 'test'\n  }]\n}, {\n  id: 'front',\n  message: 'What is your key technology?',\n  trigger: 'front_options'\n}, {\n  id: 'front_options',\n  options: [{\n    value: 'ReactJS',\n    label: 'ReactJS',\n    trigger: '1'\n  }, {\n    value: 'React Native',\n    label: 'React Native',\n    trigger: '1'\n  }, {\n    value: 'AngularJS',\n    label: 'AngularJS',\n    trigger: '1'\n  }, {\n    value: 'NodeJS',\n    label: 'NodeJS',\n    trigger: '1'\n  }, {\n    value: 'Vue',\n    label: 'Vue',\n    trigger: '1'\n  }, {\n    value: 'BabelJs',\n    label: 'BabelJs',\n    trigger: '1'\n  }]\n}, {\n  id: 'back',\n  message: 'What is your key technology?',\n  trigger: 'back_options'\n}, {\n  id: 'back_options',\n  options: [{\n    value: 'Java',\n    label: 'Java',\n    trigger: '1'\n  }, {\n    value: '.NET',\n    label: '.NET',\n    trigger: '1'\n  }, {\n    value: 'PHP',\n    label: 'PHP',\n    trigger: '1'\n  }, {\n    value: 'Python',\n    label: 'Python',\n    trigger: '1'\n  }, {\n    value: 'C++',\n    label: 'C++',\n    trigger: '1'\n  }]\n}, {\n  id: 'test',\n  message: 'What is your key technology?',\n  trigger: 'test_options'\n}, {\n  id: 'test_options',\n  options: [{\n    value: 'Automated Test Specialists',\n    label: 'Automated Test Specialists',\n    trigger: '1'\n  }, {\n    value: 'DBMS testers',\n    label: 'DBMS testers',\n    trigger: '1'\n  }, {\n    value: 'Test Analysts',\n    label: 'Test Analysts',\n    trigger: '1'\n  }, {\n    value: 'Developers-testers',\n    label: 'Developers-testers',\n    trigger: '1'\n  }, {\n    value: 'Testers-DevOPs',\n    label: 'Testers-DevOPs',\n    trigger: '1'\n  }]\n}, {\n  id: 'end',\n  message: 'Thanks! Your data was submitted successfully!',\n  end: true\n}];\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatChange\");","map":{"version":3,"sources":["/Users/Yana_Krupina/diplom/react_chat/src/component/ChatChange.js"],"names":["ChatBot","PropTypes","firestore","ChatChange","props","setUserCurrent","userCurrent","idUser","setNewAccount","getPrimary","value","duration","getUnit","unit","getManager","getHR","handleEnd","steps","values","console","log","stepsChange","propTypes","object","defaultProps","undefined","id","message","trigger","options","label","user","validator","isNaN","end"],"mappings":"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","sourcesContent":["import ChatBot from 'react-simple-chatbot';\nimport PropTypes from 'prop-types';\nimport { firestore } from '../firebase';\n\nconst ChatChange = (props) => {\n    const { setUserCurrent, userCurrent, idUser, setNewAccount} = props;\n\n    const getPrimary = (value, duration) => {\n        if(duration === 'Frontend Developer' ) {\n            return 'JavaScript, HTML, CSS';\n        } else {\n            if(duration === 'Backend Developer') {\n                return value;\n            } else {\n                return 'QA test'\n            }\n        }\n    }\n\n    const getUnit = (duration, unit) => {\n        return `Digital Engagement Practice/Digital Technology/\n                DEP UA/DEP UA East & West/DEP UA East/${duration}/\n                ${unit}`\n    }\n    \n    const getManager = (value) => {\n        switch (value) {\n            case 'ReactJS':\n            case 'Java':\n                case 'Automated Test Specialists': return 'Lochlan Cottrell';\n            case 'React Native':\n            case '.NET':\n                case 'DBMS testers': return 'Yasin Huang';\n            case 'AngularJS':\n            case 'PHP':\n                case 'Test Analysts': return 'Amanpreet Cowan';\n            case 'NodeJS':\n            case 'Python':\n                case 'Developers-testers': return 'Dewi Dunlap';\n            case 'Vue':\n            case 'C++':\n                case 'Testers-DevOPs': return 'Tonya Chang';\n            case 'BabelJs': \n            default: return 'Kendall Bolton';\n        }\n    }\n\n    const getHR = (value) => {\n        switch (value) {\n            case 'Frontend Developer': return 'Coral Howarth';\n            case 'Backend Developer': return 'Zidane Pate';\n            case 'Testers': return 'Bradley Hendrix';\n            default: return 'Fraya Hood'\n        }\n    }\n\n    const handleEnd = async ({ steps, values }) => {\n        console.log(values)\n        // const user = {};\n        // user.duration = values[1];\n        // user.profession = values[2];\n        // user.status = values[0];\n        // user.address = values[4];\n        // user.phone = values[3];\n        // user.displayName = userCurrent.displayName;\n        // user.new = false;\n        // user.email = userCurrent.email;\n        // const primary = user.primary = getPrimary(user.profession, user.duration);\n        // const unit = user.unit = getUnit(user.duration, user.profession);\n        // const unitManager = user.unitManager = getManager(user.profession);\n        // const hr = user.hr = getHR(values[1]);\n\n        // setUserCurrent(user);\n        // console.log(123, user ,idUser);\n        // firestore\n        // .collection('users')\n        // .doc(idUser)\n        // .update({\n        //     new: false,\n        //     duration : values[1],\n        //     profession : values[2],\n        //     status: values[0],\n        //     address: values[4],\n        //     phone : values[3],\n        //     unit: unit,\n        //     primary: primary,\n        //     unitManager: unitManager,\n        //     hr: hr,\n        // })\n        // .then(() => {\n        //     console.log('User updated!');\n        //     setNewAccount(false)\n        // });\n      }\n\n    return (\n        <ChatBot\n          steps={stepsChange}\n          handleEnd={handleEnd}\n        />\n    );\n}\n  \n  ChatChange.propTypes = {\n    steps: PropTypes.object,\n  };\n  \n  ChatChange.defaultProps = {\n    steps: undefined,\n  };\n  \n  export default ChatChange;\n\n  export const stepsChange = [\n      {\n        id: '1',\n        message: 'What do you want change?',\n        trigger: 'change',\n      },\n      {\n        id: 'change',\n        options: [\n          { value: 'name', label: 'Name', trigger: 'name' },\n          { value: 'phone', label: 'Phone', trigger: 'phone' },\n          { value: 'duration', label: 'Global direction', trigger: 'duration' },\n          { value: '1', label: 'Nothing', trigger: 'end' },\n        ],\n      },\n      {\n        id: 'name',\n        message: 'What is your new name?',\n        user: true,\n        trigger: '1',\n      },\n      {\n        id: 'phone',\n        message: 'What is your new phone?',\n        user: true,\n        trigger: '1',\n        validator: (value) => {\n            if (isNaN(value)) {\n              return 'value must be a number';\n            } else if (value < 0) {\n              return 'value must be positive';\n            } else if (value < 9) {\n              return `Your enter incorrect number`;\n            }\n  \n            return true;\n        },\n      },\n      {\n        id: 'duration',\n        message: 'What is your global direction?',\n        trigger: 'duration_options',\n      },\n      {\n        id: 'duration_options',\n        options: [\n          { value: 'Frontend Developer', label: 'Frontend Developer', trigger: 'front' },\n          { value: 'Backend Developer', label: 'Backend Developer', trigger: 'back' },\n          { value: 'Testers', label: 'Testers', trigger: 'test' },\n        ],\n      },\n      {\n        id: 'front',\n        message: 'What is your key technology?',\n        trigger: 'front_options',\n      },\n      {\n        id: 'front_options',\n        options: [\n          { value: 'ReactJS', label: 'ReactJS', trigger: '1' },\n          { value: 'React Native', label: 'React Native', trigger: '1' },\n          { value: 'AngularJS', label: 'AngularJS', trigger: '1' },\n          { value: 'NodeJS', label: 'NodeJS', trigger: '1' },\n          { value: 'Vue', label: 'Vue', trigger: '1' },  \n          { value: 'BabelJs', label: 'BabelJs', trigger: '1' },\n        ],\n      },\n      {\n        id: 'back',\n        message: 'What is your key technology?',\n        trigger: 'back_options',\n      },\n      {\n        id: 'back_options',\n        options: [\n          { value: 'Java', label: 'Java', trigger: '1' },\n          { value: '.NET', label: '.NET', trigger: '1' },\n          { value: 'PHP', label: 'PHP', trigger: '1' },\n          { value: 'Python', label: 'Python', trigger: '1' },\n          { value: 'C++', label: 'C++', trigger: '1' },  \n        ],\n      },\n      {\n        id: 'test',\n        message: 'What is your key technology?',\n        trigger: 'test_options',\n      },\n      {\n        id: 'test_options',\n        options: [\n          { value: 'Automated Test Specialists', label: 'Automated Test Specialists', trigger: '1' },\n          { value: 'DBMS testers', label: 'DBMS testers', trigger: '1' },\n          { value: 'Test Analysts', label: 'Test Analysts', trigger: '1' },\n          { value: 'Developers-testers', label: 'Developers-testers', trigger: '1' },\n          { value: 'Testers-DevOPs', label: 'Testers-DevOPs', trigger: '1' },  \n        ],\n      },\n      {\n        id: 'end',\n        message: 'Thanks! Your data was submitted successfully!',\n        end: true,\n      },\n];"]},"metadata":{},"sourceType":"module"}